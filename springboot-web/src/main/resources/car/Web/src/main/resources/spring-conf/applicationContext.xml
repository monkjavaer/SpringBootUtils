<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">


    <!-- 定义加载资源文件 -->
    <context:property-placeholder location="classpath*:datasource.properties" ignore-unresolvable="true"/>


    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
        <property name="statementLogErrorEnabled" value="true" />
    </bean>

    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <property name="slowSqlMillis" value="50000" />
        <property name="logSlowSql" value="true" />
    </bean>

    <!-- enable transaction demarcation with annotations -->
    <tx:annotation-driven/>

    <!-- enable component scanning (beware that this does not enable mapper
        scanning!) -->

    <bean id="taskExecutor"
          class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="10" />
        <property name="maxPoolSize" value="20" />
        <property name="WaitForTasksToCompleteOnShutdown" value="false" />
    </bean>

    <bean id="indexController" class="com.car.trunk.controller.IndexController">
        <property name="threadPoolTaskExecutor" ref="taskExecutor" />
    </bean>

    <bean id="deviceController" class="com.car.trunk.controller.device.DeviceController">
        <property name="threadPoolTaskExecutor" ref="taskExecutor" />
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"
          abstract="false" lazy-init="false" autowire="default">
        <property name="dataSource">
            <ref bean="dataSource" />
        </property>
    </bean>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${connection.driver_class}" />
        <property name="url" value="${connection.url}" />
        <property name="username" value="${connection.username}" />
        <property name="password" value="${connection.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="300" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="testWhileIdle" value="true" />

        <!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
        <property name="testOnBorrow" value="true" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="20" />

        <!-- 这里配置提交方式，默认就是TRUE，可以不用配置 -->

        <property name="defaultAutoCommit" value="true" />

        <!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
        <property name="validationQuery" value="select 1 " />
        <property name="filters" value="stat" />
        <property name="proxyFilters">
            <list>
                <ref bean="logFilter" />
            </list>
        </property>
    </bean>

    <bean id="logFilter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
        <property name="statementExecutableSqlLogEnable" value="false" />
    </bean>

    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.query.substitutions">${hibernate.query.substitutions}</prop>
                <prop key="hibernate.default_batch_fetch_size">${hibernate.default_batch_fetch_size}</prop>
                <prop key="hibernate.max_fetch_depth">${hibernate.max_fetch_depth}</prop>
                <prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
                <prop key="hibernate.bytecode.use_reflection_optimizer">${hibernate.bytecode.use_reflection_optimizer}</prop>
                <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
                <prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
                <prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
                <prop key="hibernate.cache.use_structured_entries">${hibernate.cache.use_structured_entries}</prop>
                <prop key="hibernate.current_session_context_class">${hibernate.current_session_context_class}</prop>
                <!-- hibernate.hbm2ddl.auto属性没有用到，如果设置为none的话，会在系统启动时生成一条warn级别的日志，所以留空 -->
                <!-- <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop> -->
                <prop key="hibernate.hbm2ddl.auto"></prop>
                <prop key="net.sf.ehcache.configurationResourceName">${net.sf.ehcache.configurationResourceName}</prop>
                <prop key="hibernate.jdbc.fetch_size">1000</prop>
                <prop key="hibernate.jdbc.batch_size">100</prop>
                <prop key="hibernate.connection.url">jdbc:mysql://192.168.19.145:3306/TRUNK</prop>
                <prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>
            </props>
        </property>
        <property name="packagesToScan">
            <list>
                <value>com.car.trunk.dal</value>
            </list>
        </property>
    </bean>

    <!-- 声明式事务配置开始 -->
    <bean id="h4TManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <tx:advice id="h4TAdvice" transaction-manager="h4TManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="apply*" propagation="REQUIRED" />
            <tx:method name="create*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="merge*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="enable*" propagation="REQUIRED" />
            <tx:method name="disable*" propagation="REQUIRED" />
            <tx:method name="set*" propagation="REQUIRED" />
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />
            <tx:method name="count*" propagation="REQUIRED" read-only="true" />
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />
            <tx:method name="list*" propagation="REQUIRED" read-only="true" />
            <tx:method name="*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>
    <aop:config expose-proxy="true">
        <!-- 对基类业务逻辑层实施事务 -->
        <aop:pointcut id="h4TPointcutSuper" expression="execution(* com.car.base.service..*.*(..))" />
        <aop:advisor advice-ref="h4TAdvice" pointcut-ref="h4TPointcutSuper"/>
    </aop:config>
    <aop:config expose-proxy="true">
        <!-- 对子类业务逻辑层实施事务 -->
        <aop:pointcut id="h4TPointcutSub"
                      expression="execution(* com.car.trunk.extranet..*.*(..))" />
        <aop:advisor advice-ref="h4TAdvice" pointcut-ref="h4TPointcutSub" />
    </aop:config>

    <aop:config expose-proxy="true">
        <!-- 对子类业务逻辑层实施事务 -->
        <aop:pointcut id="h4TPointcutSub"
                      expression="execution(* com.car.trunk.center..*.*(..))" />
        <aop:advisor advice-ref="h4TAdvice" pointcut-ref="h4TPointcutSub" />
    </aop:config>

    <!-- 声明式事务配置结束 -->

    <!--=============== Redis config ==================-->
    <!-- redis.properties文件在上面配置了 -->
    <!--<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">

        <property name="maxIdle" value="8" />
        <property name="maxWaitMillis" value="1000" />
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="true"/>
        &lt;!&ndash; <property name="testWhileIdle" value="true"/> &ndash;&gt;
    </bean>

    <bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool"  scope="singleton">
        <constructor-arg index="0" ref="jedisPoolConfig" />
        <constructor-arg index="1">
            <list>
                <bean class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg name="host" value="${redis.instance0.host}" />
                    <constructor-arg name="port" value="${redis.instance0.port}" />
                    <constructor-arg name="timeout" value="${redis.instance0.timeout}" />
                    <constructor-arg name="name" value="${redis.instance0.name}" />
                </bean>
                &lt;!&ndash; 集群时打开!&ndash;&gt;
                &lt;!&ndash; servers config&ndash;&gt;
                &lt;!&ndash;
                <bean class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg name="host" value="${redis.instance1.host}" />
                    <constructor-arg name="port" value="${redis.instance1.port}" />
                    <constructor-arg name="timeout" value="${redis.instance1.timeout}" />
                    <constructor-arg name="name" value="${redis.instance1.name}" />
                </bean>

                <bean class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg name="host" value="${redis.instance2.host}" />
                    <constructor-arg name="port" value="${redis.instance2.port}" />
                    <constructor-arg name="timeout" value="${redis.instance2.timeout}" />
                    <constructor-arg name="name" value="${redis.instance2.name}" />
                </bean> &ndash;&gt;
            </list>
        </constructor-arg>
    </bean>

    &lt;!&ndash; 分片时用于Transaction/pipelining/发布订阅 redis的连接池pool  &ndash;&gt;
    <bean id = "jedisPool" class="redis.clients.jedis.JedisPool"  scope="singleton">
        <constructor-arg index="0" ref="jedisPoolConfig"/>
        <constructor-arg index="1" value="${redis.instance0.host}"/>
        <constructor-arg index="2" value="${redis.instance0.port}" type="int"/>
        <constructor-arg index="3" value="${redis.instance0.timeout}" type="int"/>
        &lt;!&ndash;<constructor-arg index="4" value="${redis.instance0.pass}"/>  &ndash;&gt;
    </bean>-->

    <!-- 开启这个配置，spring才能识别@Scheduled注解   -->
    <task:annotation-driven scheduler="qbScheduler" mode="proxy"/>
    <task:scheduler id="qbScheduler" pool-size="10"/>

</beans>