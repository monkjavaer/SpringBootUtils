<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
    http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd"
       default-lazy-init ="true">

    <!-- 打开扫描函数包 , 默认使用注解 -->
    <context:component-scan base-package="com.car"/>

    <context:annotation-config />

<!--    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:redis.properties</value>
            </list>
        </property>
    </bean>-->

    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
        <property name="statementLogErrorEnabled" value="true" />
    </bean>

    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <property name="slowSqlMillis" value="50000" />
        <property name="logSlowSql" value="true" />
    </bean>

    <!-- enable transaction demarcation with annotations -->
    <tx:annotation-driven/>

    <!-- enable component scanning (beware that this does not enable mapper
        scanning!) -->

    <bean id="taskExecutor"
          class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="10" />
        <property name="maxPoolSize" value="20" />
        <property name="WaitForTasksToCompleteOnShutdown" value="false" />
    </bean>

    <bean id="logFilter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
        <property name="statementExecutableSqlLogEnable" value="false" />
    </bean>

    <!--=============== Redis config ==================-->
    <!-- redis.properties文件在上面配置了 -->
    <!--<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">

        <property name="maxIdle" value="8" />
        <property name="maxWaitMillis" value="1000" />
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="true"/>
        &lt;!&ndash; <property name="testWhileIdle" value="true"/> &ndash;&gt;
    </bean>

    <bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool"  scope="singleton">
        <constructor-arg index="0" ref="jedisPoolConfig" />
        <constructor-arg index="1">
            <list>
                <bean class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg name="host" value="${redis.instance0.host}" />
                    <constructor-arg name="port" value="${redis.instance0.port}" />
                    <constructor-arg name="timeout" value="${redis.instance0.timeout}" />
                    <constructor-arg name="name" value="${redis.instance0.name}" />
                </bean>
                &lt;!&ndash; 集群时打开!&ndash;&gt;
                &lt;!&ndash; servers config&ndash;&gt;
                &lt;!&ndash;
                <bean class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg name="host" value="${redis.instance1.host}" />
                    <constructor-arg name="port" value="${redis.instance1.port}" />
                    <constructor-arg name="timeout" value="${redis.instance1.timeout}" />
                    <constructor-arg name="name" value="${redis.instance1.name}" />
                </bean>

                <bean class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg name="host" value="${redis.instance2.host}" />
                    <constructor-arg name="port" value="${redis.instance2.port}" />
                    <constructor-arg name="timeout" value="${redis.instance2.timeout}" />
                    <constructor-arg name="name" value="${redis.instance2.name}" />
                </bean> &ndash;&gt;
            </list>
        </constructor-arg>
    </bean>

    &lt;!&ndash; 分片时用于Transaction/pipelining/发布订阅 redis的连接池pool  &ndash;&gt;
    <bean id = "jedisPool" class="redis.clients.jedis.JedisPool"  scope="singleton">
        <constructor-arg index="0" ref="jedisPoolConfig"/>
        <constructor-arg index="1" value="${redis.instance0.host}"/>
        <constructor-arg index="2" value="${redis.instance0.port}" type="int"/>
        <constructor-arg index="3" value="${redis.instance0.timeout}" type="int"/>
        &lt;!&ndash;<constructor-arg index="4" value="${redis.instance0.pass}"/>  &ndash;&gt;
    </bean>-->

    <!-- 开启这个配置，spring才能识别@Scheduled注解   -->
    <task:annotation-driven scheduler="qbScheduler" mode="proxy"/>
    <task:scheduler id="qbScheduler" pool-size="10"/>
</beans>