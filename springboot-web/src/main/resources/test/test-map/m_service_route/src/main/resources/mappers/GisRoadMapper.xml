<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.m.gis.springboot.mapper.GisRoadMapper">
  <resultMap id="BaseResultMap" type="com.m.gis.springboot.po.GisRoad">
    <!--
      WARNING - @mbg.generated
    -->
    <id column="gid" jdbcType="INTEGER" property="id" />
    <result column="osm_id" jdbcType="VARCHAR" property="osmId" />
    <result column="code" jdbcType="SMALLINT" property="code" />
    <result column="fclass" jdbcType="VARCHAR" property="fclass" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="ref" jdbcType="VARCHAR" property="ref" />
    <result column="oneway" jdbcType="VARCHAR" property="oneway" />
    <result column="maxspeed" jdbcType="SMALLINT" property="maxspeed" />
    <result column="layer" jdbcType="DOUBLE" property="layer" />
    <result column="bridge" jdbcType="VARCHAR" property="bridge" />
    <result column="tunnel" jdbcType="VARCHAR" property="tunnel" />
    <result column="geom" jdbcType="OTHER" property="theGeom" />
    <result column="source" jdbcType="INTEGER" property="source" />
    <result column="target" jdbcType="INTEGER" property="target" />
    <result column="cost" jdbcType="DOUBLE" property="cost" />
    <result column="reverse_cost" jdbcType="DOUBLE" property="reverseCost" />
    <result column="restricts" jdbcType="ARRAY" property="restricts" />
    <result column="dir" jdbcType="VARCHAR" property="dir" />
    <result column="old_id" jdbcType="INTEGER" property="oldId" />
  </resultMap>

  <resultMap id="SelectNearestNodeMap" type="com.m.gis.springboot.po.GisNearestNode">
    <id column="query_id" jdbcType="INTEGER" property="queryId" />
    <result column="node_id" jdbcType="INTEGER" property="nodeId" />
    <result column="x" jdbcType="DOUBLE" property="longitude" />
    <result column="y" jdbcType="DOUBLE" property="latitude" />
  </resultMap>

  <!-- road表返回的部分字段-->
  <resultMap id="SelectRoadMap" type="com.m.gis.springboot.po.GisBaseRoad">
    <id column="gid" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="maxspeed" jdbcType="SMALLINT" property="maxspeed" />
    <result column="bridge" jdbcType="BOOLEAN" property="bridge" />
    <result column="tunnel" jdbcType="BOOLEAN" property="tunnel" />
    <result column="geom" jdbcType="VARCHAR" property="geom" />
    <result column="source" jdbcType="INTEGER" property="source" />
    <result column="target" jdbcType="INTEGER" property="target" />
    <result column="cost" jdbcType="DOUBLE" property="cost" />
    <result column="reverse_cost" jdbcType="DOUBLE" property="reverseCost" />
    <result column="length" jdbcType="DOUBLE" property="length" />
    <result column="dir" jdbcType="VARCHAR" property="dir" />
    <result column="fraction" jdbcType="DOUBLE" property="fraction" />
  </resultMap>

  <!-- 用于查询最邻近路径时的结果集-->
  <resultMap id="NearestRoadMap" type="com.m.gis.springboot.po.GisNearestRoad" extends="SelectRoadMap">
    <result column="query_id" jdbcType="INTEGER" property="queryId" />
    <result column="fraction" jdbcType="DOUBLE" property="fraction" />
    <result column="closest_x" jdbcType="DOUBLE" property="closestPointLongitude" />
    <result column="closest_y" jdbcType="DOUBLE" property="closestPointLatitude" />
  </resultMap>

  <!-- 用于返回最短路径时的结果集-->
  <resultMap id="RouteRoadMap" type="com.m.gis.springboot.po.GisRouteRoad" extends="SelectRoadMap">
    <result column="route_id" jdbcType="INTEGER" property="routeId" />
    <result column="route_segement_id" jdbcType="INTEGER" property="routeSegementId" />
    <result column="start_node_id" jdbcType="INTEGER" property="startNodeId" />
    <result column="route_cost" jdbcType="INTEGER" property="routeCost" />
  </resultMap>

    <!-- 用于返回临近设施点的结果集 -->
  <resultMap id="NearPoiMap" type="com.m.gis.springboot.vo.GisNearPoiVO">
      <id column="gid" jdbcType="INTEGER" property="id" />
      <result column="name" jdbcType="VARCHAR" property="name" />
      <result column="address" jdbcType="VARCHAR" property="address" />
      <result column="telephone" jdbcType="VARCHAR" property="telephone" />
      <result column="type_code" jdbcType="VARCHAR" property="type" />
      <result column="district_code" jdbcType="VARCHAR" property="districtCode" />
      <result column="longitude" jdbcType="DOUBLE" property="longitude" />
      <result column="latitude" jdbcType="DOUBLE" property="latitude" />
      <result column="remark" jdbcType="VARCHAR" property="note" />
      <result column="distance" jdbcType="DOUBLE" property="distance" />
  </resultMap>


    <sql id="SelectRoad_Column">
    r.gid, r.name,r.max_speed,r.bridge,r.tunnel,st_astext(r.geom) as geom,r.source,r.target,r.cost,r.reverse_cost,st_length(r.geom::geography) as length,r.oneway as dir
  </sql>

    <select id="getNearestNode" resultMap="SelectNearestNodeMap">
        <foreach collection="locations" separator="union all" item="item" index="index">
            (select #{index} as query_id,id as node_id, st_x(the_geom) as x, st_y(the_geom) as y
            from ${tablename}_vertices_pgr r where st_intersects(r.the_geom,st_buffer(ST_SetSRID(st_makepoint(#{item.longitude},#{item.latitude}),4326),#{tolerance})) order by st_distance(r.the_geom,ST_SetSRID(st_makepoint(#{item.longitude},#{item.latitude}),4326)) limit 1)
        </foreach>
    </select>

  <select id="getNearestRoad" resultMap="NearestRoadMap">
    <foreach collection="locations" separator="union all" item="item" index="index">
      (select
      <include refid="SelectRoad_Column" />,
        #{index} as query_id,
        ST_LineLocatePoint(r.geom, ST_SetSRID(st_makepoint(#{item.longitude},#{item.latitude}),4326)) as fraction,
        st_x(ST_ClosestPoint(r.geom,ST_SetSRID(st_makepoint(#{item.longitude},#{item.latitude}),4326))) as closest_x,
        st_y(ST_ClosestPoint(r.geom,ST_SetSRID(st_makepoint(#{item.longitude},#{item.latitude}),4326))) as closest_y
        from ${tablename} r where st_intersects(r.geom,st_buffer(ST_SetSRID(st_makepoint(#{item.longitude},#{item.latitude}),4326),#{tolerance})) order by st_distance(r.geom,ST_SetSRID(st_makepoint(#{item.longitude},#{item.latitude}),4326)))
    </foreach>
  </select>

    <select id="getTrsp" resultMap="RouteRoadMap">
        <foreach collection="nodes" index="index" item="node" separator="union all">
            (with segements as (
            select * FROM pgr_trsp(
            'SELECT gid::INTEGER as id, source::INTEGER, target::INTEGER, cost, reverse_cost FROM '|| #{tablename} || ' where 1=1 '
            <if test="filter!=null and filter != ''">
                || ' and st_intersects(geom,ST_GeomFromText(''' || #{filter} || ''',4326))'
            </if>
            <if test="barries!=null and barries.size>0">
                <foreach collection="barries" item="item" index="index">
                    || ' and st_intersects(geom,ST_GeomFromText(''' || #{item} || ''',4326)) = false '
                </foreach>
            </if>
            ,
            #{node.start},
            #{node.end},
            true,
            true,
            '') )
            select  <include refid="SelectRoad_Column" />,#{node.id} as route_id, s.seq as route_segement_id,s.id1 as start_node_id,s.cost as route_cost
            from ${tablename} r join segements s on r.gid = s.id2)
        </foreach>
    </select>

<!--  <select id="getTrspViaEdges" resultMap="RouteRoadMap">
      with segements as (
      select * FROM pgr_trspViaEdges(
      'SELECT id::INTEGER, source::INTEGER, target::INTEGER, cost, reverse_cost FROM '|| #{tablename} || ' where 1=1 '
      <if test="filter!=null and filter != ''">
        || ' and st_intersects(the_geom,ST_GeomFromText(''' || #{filter} || '''))'
      </if>
      <if test="barries!=null and barries.size>0">
          <foreach collection="barries" item="item" index="index">
              || ' and st_intersects(the_geom,ST_GeomFromText(''' || #{item} || ''')) = false '
          </foreach>
      </if>
      ,
      #{edges,typeHandler=com.m.gis.springboot.typehandler.ArrayTypeHandler},
      #{fractions,typeHandler=com.m.gis.springboot.typehandler.ArrayTypeHandler},
      true,
      true,
      'SELECT to_cost, target_id::int4, FROM_edge ||
      coalesce('',''||via_path,'''') AS via_path FROM restrictions') )
      select  <include refid="SelectRoad_Column" />,1 as route_id, s.seq as route_segement_id,s.id2 as start_node_id,s.cost as route_cost
      from ${tablename} r join segements s on r.id = s.id3
  </select>-->


    <select id="getKShortestPath" resultMap="RouteRoadMap">
        with segements as (
        SELECT * FROM pgr_KSP(
             'SELECT gid as id, source, target, cost, reverse_cost FROM ' || #{tablename} || ' where 1=1 '
            <if test="filter!=null and filter != ''">
                || ' and st_intersects(geom,ST_GeomFromText(''' || #{filter} || ''',4326))'
            </if>
            <if test="barries!=null and barries.size>0">
                <foreach collection="barries" item="item" index="index">
                    || ' and st_intersects(geom,ST_GeomFromText(''' || #{item} || ''',4326)) = false'
                </foreach>
            </if>
            ,
            #{startNode},
            #{endNode},
            #{pathCount}
           )
        )
        select <include refid="SelectRoad_Column" />,s.path_id as route_id,s.seq as route_segement_id,s.node as start_node_id,s.cost as route_cost
        from ${tablename} r join segements s on r.gid = s.edge
    </select>



    <select id="getDrivingDistance" resultType="java.lang.String">
        <foreach collection="startNodes" index="index" item="item" separator="union all">
            select st_astext(pgr_pointsAsPolygon('
            with nodes as (
            SELECT node FROM pgr_drivingDistance(
            ''''SELECT gid as id, source, target, cost, reverse_cost FROM ' || #{tablename} ||  ' where st_intersects(geom,st_buffer(ST_SetSRID(st_makepoint(' ||
            #{item.longitude} || ',' || #{item.latitude} || '),4326),' || #{tolerance} ||
            '))'''',' || #{item.nodeId} || ',' || #{cost} ||'
            ))
            select n.id::int4 as id,st_x(n.the_geom) as x,st_y(n.the_geom) as y from ' || #{tablename} || '_vertices_pgr n join nodes on n.id = nodes.node'
            ))
        </foreach>

    </select>


    <select id="getNearPoi" parameterType="com.m.gis.springboot.qo.GisNearPoiQO" resultMap="NearPoiMap">
        SELECT gid, name, ST_Distance(
            ST_Transform(geom,3857),
            ST_Transform(ST_SetSRID(ST_MakePoint(#{longitude}, #{latitude}),4326),3857)
            ) as distance,
            address, telephone, type_code, district_code, remark, longitude, latitude
            FROM gis_poi_t
            WHERE type_code = #{poiType}
            ORDER BY distance limit #{number};
    </select>


</mapper>